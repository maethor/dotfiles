#!/bin/zsh
if [ "$USER" != "root" ]; then
SSH_STATIC_AUTH_SOCK="/tmp/ssh-agent-$USER"
elif [ -n "$SUDO_USER" ]; then
SSH_STATIC_AUTH_SOCK="/tmp/ssh-agent-$SUDO_USER"
fi

debug() {
	#echo $*
}

launch_keychain() {
	if [ -x "$(which keychain)" ]; then
		keychain --nogui --inherit any --agents gpg,ssh

		[ -r $HOME/.keychain/$(hostname)-sh ] &&  source $HOME/.keychain/$(hostname)-sh
		[ -r $HOME/.keychain/$(hostname)-sh-gpg ] &&  source $HOME/.keychain/$(hostname)-sh-gpg
	fi
}

launch_ssh_agent() {
	SSH_DIRECTORY="$HOME/.ssh"

    if [ ! -d "$SSH_DIRECTORY" ]; then
		debug "Creating $SSH_DIRECTORY directory."
		mkdir "$SSH_DIRECTORY"
		chmod 700 "$SSH_DIRECTORY"
	fi

	if [ -x "$(which ssh-agent)" ]; then
		if [ -r "$SSH_DIRECTORY/agent-pid" ]; then
			if [ ! -d "/proc/$(< $SSH_DIRECTORY/agent-pid)" ] ; then
				debug "Removing remaining PID file."
		        rm -f "$SSH_DIRECTORY/agent-pid"
			fi
		fi

		if [ ! -r "$SSH_DIRECTORY/agent-pid" ]; then
			debug "Launching SSH agent."
			ssh-agent -s > "$SSH_DIRECTORY/agent"
			echo $SSH_AGENT_PID > "$SSH_DIRECTORY/agent-pid"
		fi

		[ -r "$SSH_DIRECTORY/agent" ] && source "$SSH_DIRECTORY/agent"
	fi

	unset SSH_DIRECTORY
}

launch_gpg_agent() {
	if [ -x "$(which gpg-agent)" ]; then
		debug "Launching GPG agent."
       	gpg-agent --quiet --use-standard-socket --daemon > "$HOME/.gnupg/gpg-agent" 2>/dev/null
        if [ -r "$HOME/.gnupg/gpg-agent" ]; then source "$HOME/.gnupg/gpg-agent"; fi
    fi
}

check_ssh_key() {
	recursive="$1"
	if [ -x "$(which ssh-add)" ]; then
		# "ssh-add -l" return codes:
	       	# 0: one or more keys were found.
	       	# 1: no key was found.
	       	# 2: agent could not be contacted.

		ssh-add -l > /dev/null;
		ret=$?
		if [ 0 -eq $ret ] ; then
			# nothing to do.
			debug "Key is already added."
		elif [ 1 -eq $ret ] ; then
			# agent exists but no key found
			debug "Adding key."
			ssh-add # try to add a key, 0 on success, 1 on failure
			[ 1 -eq $? ] && echo "ssh-add failed (probably no key found)"
		else
			# agent does not exist (no keychain)
			debug "Agent is not launched. We may not be here..."
			launch_ssh_agent

			if [ -z "$recursive" ]; then
				debug "Checking key again."
				check_ssh_key true
			fi
		fi
		unset ret
	fi
	unset recursive
}

update_ssh_link() {
	[ -n "$SSH_AUTH_SOCK" ] && [ "$SSH_AUTH_SOCK" != "$SSH_STATIC_AUTH_SOCK" ] && ln -sf "$SSH_AUTH_SOCK" "$SSH_STATIC_AUTH_SOCK"
	[ -L "$SSH_STATIC_AUTH_SOCK" ] && export SSH_AUTH_SOCK="$SSH_STATIC_AUTH_SOCK"
}

if [ -x "$(which keychain)" ]; then
    # Launch keuchain
    launch_keychain

	# I have keychain, I don't have to do my checks
	update_ssh_link
else
	# I don't have keychain, I have to do all my checks manually
	if [ -x "$(which ssh-agent)" ]; then
		if [ ! -e "$SSH_AUTH_SOCK" ]; then
			debug "Invalid \$SSH_AUTH_SOCK, unset it."
			unset SSH_AUTH_SOCK
		elif [ "$SSH_AUTH_SOCK" != "$SSH_STATIC_AUTH_SOCK" ]; then 
			debug "Valid \$SSH_AUTH_SOCK, linking to it."
			ln -sf "$SSH_AUTH_SOCK" "$SSH_STATIC_AUTH_SOCK"
		fi

		if [ -e "$SSH_STATIC_AUTH_SOCK" ]; then
			debug "Overriding \$SSH_AUTH_SOCK with existing \$SSH_STATIC_AUTH_SOCK"
			export SSH_AUTH_SOCK="$SSH_STATIC_AUTH_SOCK"
			check_ssh_key
		elif [ "$USER" != "root" ]; then
			[ -L "$SSH_STATIC_AUTH_SOCK" ] && unlink "$SSH_STATIC_AUTH_SOCK"

			launch_ssh_agent
			check_ssh_key
		    update_ssh_link
		fi
	fi

	launch_gpg_agent
fi # [ -x "$(which keychain)" ]

